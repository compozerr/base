/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type Guid, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetExampleResponse}
 */
// @ts-ignore
export function createGetExampleResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetExampleResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MeResponse}
 */
// @ts-ignore
export function createMeResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMeResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {User}
 */
// @ts-ignore
export function createUserFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUser;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserId}
 */
// @ts-ignore
export function createUserIdFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserId;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetExampleResponse(getExampleResponse: Partial<GetExampleResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "message": n => { getExampleResponse.message = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMeResponse(meResponse: Partial<MeResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "avatarUrl": n => { meResponse.avatarUrl = n.getStringValue(); },
        "email": n => { meResponse.email = n.getStringValue(); },
        "id": n => { meResponse.id = n.getGuidValue(); },
        "name": n => { meResponse.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUser(user: Partial<User> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "authProviderUserId": n => { user.authProviderUserId = n.getStringValue(); },
        "avatarUrl": n => { user.avatarUrl = n.getStringValue(); },
        "createdAt": n => { user.createdAt = n.getDateValue(); },
        "email": n => { user.email = n.getStringValue(); },
        "id": n => { user.id = n.getObjectValue<UserId>(createUserIdFromDiscriminatorValue); },
        "name": n => { user.name = n.getStringValue(); },
        "roles": n => { user.roles = n.getCollectionOfPrimitiveValues<string>(); },
        "updatedAt": n => { user.updatedAt = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserId(userId: Partial<UserId> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "value": n => { userId.value = n.getGuidValue(); },
    }
}
export interface GetExampleResponse extends Parsable {
    /**
     * The message property
     */
    message?: string | null;
}
export interface MeResponse extends Parsable {
    /**
     * The avatarUrl property
     */
    avatarUrl?: string | null;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetExampleResponse(writer: SerializationWriter, getExampleResponse: Partial<GetExampleResponse> | undefined | null = {}) : void {
    if (getExampleResponse) {
        writer.writeStringValue("message", getExampleResponse.message);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMeResponse(writer: SerializationWriter, meResponse: Partial<MeResponse> | undefined | null = {}) : void {
    if (meResponse) {
        writer.writeStringValue("avatarUrl", meResponse.avatarUrl);
        writer.writeStringValue("email", meResponse.email);
        writer.writeGuidValue("id", meResponse.id);
        writer.writeStringValue("name", meResponse.name);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUser(writer: SerializationWriter, user: Partial<User> | undefined | null = {}) : void {
    if (user) {
        writer.writeStringValue("authProviderUserId", user.authProviderUserId);
        writer.writeStringValue("avatarUrl", user.avatarUrl);
        writer.writeDateValue("createdAt", user.createdAt);
        writer.writeStringValue("email", user.email);
        writer.writeObjectValue<UserId>("id", user.id, serializeUserId);
        writer.writeStringValue("name", user.name);
        writer.writeCollectionOfPrimitiveValues<string>("roles", user.roles);
        writer.writeDateValue("updatedAt", user.updatedAt);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserId(writer: SerializationWriter, userId: Partial<UserId> | undefined | null = {}) : void {
    if (userId) {
    }
}
export interface User extends Parsable {
    /**
     * The authProviderUserId property
     */
    authProviderUserId?: string | null;
    /**
     * The avatarUrl property
     */
    avatarUrl?: string | null;
    /**
     * The createdAt property
     */
    createdAt?: Date | null;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The id property
     */
    id?: UserId | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The roles property
     */
    roles?: string[] | null;
    /**
     * The updatedAt property
     */
    updatedAt?: Date | null;
}
export interface UserId extends Parsable {
    /**
     * The value property
     */
    value?: Guid | null;
}
/* tslint:enable */
/* eslint-enable */
