/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

import type { paths } from "../schema";
import type { DeepReadonly, InvalidateQueryFilters, OperationInfiniteData, PartialParameters, QueryFiltersByParameters, QueryFiltersByQueryKey, QueryFnOptionsByParameters, QueryFnOptionsByQueryKey, RequestFnResponse, ServiceOperationEnsureInfiniteQueryDataOptions, ServiceOperationEnsureQueryDataOptions, ServiceOperationFetchInfiniteQueryOptions, ServiceOperationFetchQueryOptions, ServiceOperationInfiniteQueryKey, ServiceOperationQueryKey, UseQueryOptionsForUseQueries, UseQueryOptionsForUseSuspenseQuery, WithOptional, QraftServiceOperationsToken } from "@openapi-qraft/tanstack-query-react-types";
import type { CancelOptions, InfiniteQueryPageParamsOptions, InvalidateOptions, NoInfer, QueryState, RefetchOptions, ResetOptions, SetDataOptions, Updater } from "@tanstack/query-core";
import type { DefinedInitialDataInfiniteOptions, DefinedInitialDataOptions, DefinedUseInfiniteQueryResult, DefinedUseQueryResult, UndefinedInitialDataInfiniteOptions, UndefinedInitialDataOptions, UseInfiniteQueryResult, UseQueryResult, UseSuspenseInfiniteQueryOptions, UseSuspenseInfiniteQueryResult, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
export interface V1Service {
    getExample: {
        /**/
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError> | QueryFiltersByQueryKey<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError>, options?: CancelOptions): Promise<void>;
        /**/
        getQueryKey(parameters: DeepReadonly<GetExampleParameters>): ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.v1Service.getExample.useQuery({
         *     query: {
         *         name: name
         *     }
         * })
         * ```
         */
        useQuery<TData = GetExampleData>(parameters: ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters> | (DeepReadonly<GetExampleParameters>), options?: Omit<UndefinedInitialDataOptions<GetExampleData, GetExampleError, TData, ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters>>, "queryKey">): UseQueryResult<TData, GetExampleError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.v1Service.getExample.useQuery({
         *     query: {
         *         name: name
         *     }
         * })
         * ```
         */
        useQuery<TData = GetExampleData>(parameters: ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters> | (DeepReadonly<GetExampleParameters>), options: Omit<DefinedInitialDataOptions<GetExampleData, GetExampleError, TData, ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetExampleError | Error>;
        /**/
        fetchInfiniteQuery<TPageParam extends GetExampleParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetExampleSchema, GetExampleData, GetExampleParameters, DeepReadonly<TPageParam>, GetExampleError>): Promise<OperationInfiniteData<GetExampleData, GetExampleParameters>>;
        /**/
        prefetchInfiniteQuery<TPageParam extends GetExampleParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetExampleSchema, GetExampleData, GetExampleParameters, DeepReadonly<TPageParam>, GetExampleError>): Promise<void>;
        /**/
        ensureInfiniteQueryData<TPageParam extends GetExampleParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<GetExampleSchema, GetExampleData, GetExampleParameters, DeepReadonly<TPageParam>, GetExampleError>): Promise<OperationInfiniteData<GetExampleData, GetExampleParameters>>;
        /**/
        fetchQuery(options: ServiceOperationFetchQueryOptions<GetExampleSchema, GetExampleData, GetExampleParameters, GetExampleError>): Promise<GetExampleData>;
        /**/
        prefetchQuery(options: ServiceOperationFetchQueryOptions<GetExampleSchema, GetExampleData, GetExampleParameters, GetExampleError>): Promise<void>;
        /**/
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<GetExampleSchema, GetExampleData, GetExampleParameters, GetExampleError>): Promise<GetExampleData>;
        /**/
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<GetExampleSchema, GetExampleParameters> | (DeepReadonly<GetExampleParameters>)): OperationInfiniteData<GetExampleData, GetExampleParameters> | undefined;
        /**/
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError> | QueryFiltersByQueryKey<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<GetExampleSchema, GetExampleParameters>,
            data: NoInfer<OperationInfiniteData<GetExampleData, GetExampleParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters>,
            data: GetExampleData | undefined
        ]>;
        /**/
        getQueryData(parameters: ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters> | (DeepReadonly<GetExampleParameters>)): GetExampleData | undefined;
        /**/
        getQueryState(parameters: ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters> | (DeepReadonly<GetExampleParameters>)): QueryState<GetExampleData, GetExampleError> | undefined;
        /**/
        getInfiniteQueryState(parameters: DeepReadonly<GetExampleParameters> | ServiceOperationInfiniteQueryKey<GetExampleSchema, GetExampleParameters>): QueryState<OperationInfiniteData<GetExampleData, GetExampleParameters>, GetExampleError> | undefined;
        /**/
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError>, options?: InvalidateOptions): Promise<void>;
        /**/
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError> | QueryFiltersByQueryKey<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError>): number;
        /**/
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<GetExampleSchema, GetExampleParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<GetExampleParameters, TMeta, TSignal>), client?: (schema: GetExampleSchema, options: {
            parameters: GetExampleParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<GetExampleData, GetExampleError>>): Promise<RequestFnResponse<GetExampleData, GetExampleError>>;
        /**/
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError> | QueryFiltersByQueryKey<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError>, options?: RefetchOptions): Promise<void>;
        /**/
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError> | QueryFiltersByQueryKey<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError>): void;
        /**/
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError> | QueryFiltersByQueryKey<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError>, options?: ResetOptions): Promise<void>;
        /**/
        setInfiniteQueryData(parameters: (DeepReadonly<GetExampleParameters>) | ServiceOperationInfiniteQueryKey<GetExampleSchema, GetExampleParameters>, updater: Updater<NoInfer<OperationInfiniteData<GetExampleData, GetExampleParameters>> | undefined, NoInfer<DeepReadonly<OperationInfiniteData<GetExampleData, GetExampleParameters>>> | undefined>, options?: SetDataOptions): OperationInfiniteData<GetExampleData, GetExampleParameters> | undefined;
        /**/
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError> | QueryFiltersByQueryKey<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError>, updater: Updater<NoInfer<GetExampleData> | undefined, NoInfer<GetExampleData> | undefined>, options?: SetDataOptions): Array<GetExampleData | undefined>;
        /**/
        setQueryData(parameters: (DeepReadonly<GetExampleParameters>) | ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters>, updater: Updater<NoInfer<GetExampleData> | undefined, NoInfer<DeepReadonly<GetExampleData>> | undefined>, options?: SetDataOptions): GetExampleData | undefined;
        /**/
        getInfiniteQueryKey(parameters: DeepReadonly<GetExampleParameters>): ServiceOperationInfiniteQueryKey<GetExampleSchema, GetExampleParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.v1Service.getExample.useInfiniteQuery({
         *     query: {
         *         name: name
         *     }
         * }, {
         *     initialPageParam: {
         *         query: {
         *             name: initialName
         *         }
         *     },
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetExampleParameters, TQueryFnData = GetExampleData, TData = OperationInfiniteData<TQueryFnData, GetExampleParameters>>(parameters: ServiceOperationInfiniteQueryKey<GetExampleSchema, GetExampleParameters> | (DeepReadonly<GetExampleParameters>), options: Omit<UndefinedInitialDataInfiniteOptions<TQueryFnData, GetExampleError, TData, ServiceOperationInfiniteQueryKey<GetExampleSchema, GetExampleParameters>, PartialParameters<DeepReadonly<TPageParam>>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<TQueryFnData, PartialParameters<DeepReadonly<TPageParam>>>): UseInfiniteQueryResult<TData, GetExampleError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.v1Service.getExample.useInfiniteQuery({
         *     query: {
         *         name: name
         *     }
         * }, {
         *     initialPageParam: {
         *         query: {
         *             name: initialName
         *         }
         *     },
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetExampleParameters, TQueryFnData = GetExampleData, TData = OperationInfiniteData<TQueryFnData, GetExampleParameters>>(parameters: ServiceOperationInfiniteQueryKey<GetExampleSchema, GetExampleParameters> | (DeepReadonly<GetExampleParameters>), options: Omit<DefinedInitialDataInfiniteOptions<TQueryFnData, GetExampleError, TData, ServiceOperationInfiniteQueryKey<GetExampleSchema, GetExampleParameters>, PartialParameters<DeepReadonly<TPageParam>>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetExampleData, PartialParameters<DeepReadonly<TPageParam>>>): DefinedUseInfiniteQueryResult<TData, GetExampleError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const getExampleTotal = qraft.v1Service.getExample.useIsFetching()
         * ```
         * @example Checks the number of normal queries fetching with the specified parameters.
         * ```ts
         * const getExampleByParametersTotal = qraft.v1Service.getExample.useIsFetching({
         *     infinite: false,
         *     parameters: {
         *         query: {
         *             name: name
         *         }
         *     }
         * })
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError> | QueryFiltersByQueryKey<GetExampleSchema, GetExampleData, TInfinite, GetExampleParameters, GetExampleError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const getExampleResults = qraft.v1Service.getExample.useQueries({
         *     queries: [
         *         {
         *             query: {
         *                 name: name1
         *             }
         *         },
         *         {
         *             query: {
         *                 name: name2
         *             }
         *         }
         *     ]
         * });
         * getExampleResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const getExampleCombinedResults = qraft.v1Service.getExample.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {
         *             query: {
         *                 name: name1
         *             }
         *         },
         *         {
         *             query: {
         *                 name: name2
         *             }
         *         }
         *     ]
         * });
         * getExampleCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<GetExampleSchema, GetExampleParameters, GetExampleData, GetExampleError>>, TCombinedResult = Array<UseQueryResult<GetExampleData, GetExampleError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<GetExampleData, GetExampleError>>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        getQueryKey(parameters: DeepReadonly<GetExampleParameters>): ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.v1Service.getExample.useQuery({
         *     query: {
         *         name: name
         *     }
         * })
         * ```
         */
        useQuery<TData = GetExampleData>(parameters: ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters> | (DeepReadonly<GetExampleParameters>), options?: Omit<UndefinedInitialDataOptions<GetExampleData, GetExampleError, TData, ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters>>, "queryKey">): UseQueryResult<TData, GetExampleError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.v1Service.getExample.useQuery({
         *     query: {
         *         name: name
         *     }
         * })
         * ```
         */
        useQuery<TData = GetExampleData>(parameters: ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters> | (DeepReadonly<GetExampleParameters>), options: Omit<DefinedInitialDataOptions<GetExampleData, GetExampleError, TData, ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetExampleError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.v1Service.getExample.useSuspenseInfiniteQuery({
         *     query: {
         *         name: name
         *     }
         * }, {
         *     initialPageParam: {
         *         query: {
         *             name: initialName
         *         }
         *     },
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends GetExampleParameters, TData = GetExampleData>(parameters: ServiceOperationInfiniteQueryKey<GetExampleSchema, GetExampleParameters> | (DeepReadonly<GetExampleParameters>), options: Omit<UseSuspenseInfiniteQueryOptions<GetExampleData, GetExampleError, OperationInfiniteData<TData, GetExampleParameters>, GetExampleData, ServiceOperationInfiniteQueryKey<GetExampleSchema, GetExampleParameters>, PartialParameters<DeepReadonly<TPageParam>>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetExampleData, PartialParameters<DeepReadonly<TPageParam>>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, GetExampleParameters>, GetExampleError | Error>;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently with Suspense support.
         * Similar to useQueries but integrates with React Suspense for loading states.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseQueries|`useSuspenseQueries(...)` documentation}
         * @example Basic usage with Suspense
         * ```ts
         * const getExampleData = qraft.v1Service.getExample.useSuspenseQueries({
         *     queries: [
         *         {
         *             query: {
         *                 name: name1
         *             }
         *         },
         *         {
         *             query: {
         *                 name: name2
         *             }
         *         }
         *     ]
         * });
         * getExampleResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example With data transformation using combine
         * ```ts
         * const getExampleCombinedData = qraft.v1Service.getExample.useSuspenseQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {
         *             query: {
         *                 name: name1
         *             }
         *         },
         *         {
         *             query: {
         *                 name: name2
         *             }
         *         }
         *     ]
         * });
         * getExampleCombinedData.forEach(data => console.log({ data }));
         * ```
         */
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<GetExampleSchema, GetExampleParameters, GetExampleData, GetExampleError>>, TCombinedResult = Array<UseSuspenseQueryResult<GetExampleData, GetExampleError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<GetExampleData, GetExampleError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**
         * Performs asynchronous data fetching with Suspense support.
         * Similar to useQuery but integrates with React Suspense for loading states.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseQuery|`useSuspenseQuery(...)` documentation}
         * @example Suspense Query with parameters
         * ```ts
         * const data = qraft.v1Service.getExample.useSuspenseQuery({
         *     query: {
         *         name: name
         *     }
         * })
         * ```
         */
        useSuspenseQuery<TData = GetExampleData>(parameters: ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters> | (DeepReadonly<GetExampleParameters>), options?: Omit<UseSuspenseQueryOptions<GetExampleData, GetExampleError, TData, ServiceOperationQueryKey<GetExampleSchema, GetExampleParameters>>, "queryKey">): UseSuspenseQueryResult<TData, GetExampleError | Error>;
        schema: GetExampleSchema;
        types: {
            parameters: GetExampleParameters;
            data: GetExampleData;
            error: GetExampleError;
        };
    };
    get: {
        /**/
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>, options?: CancelOptions): Promise<void>;
        /**/
        getQueryKey(parameters: DeepReadonly<GetParameters> | void): ServiceOperationQueryKey<GetSchema, GetParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.v1Service.get.useQuery()
         * ```
         */
        useQuery<TData = GetData>(parameters: ServiceOperationQueryKey<GetSchema, GetParameters> | (DeepReadonly<GetParameters> | void), options?: Omit<UndefinedInitialDataOptions<GetData, GetError, TData, ServiceOperationQueryKey<GetSchema, GetParameters>>, "queryKey">): UseQueryResult<TData, GetError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.v1Service.get.useQuery()
         * ```
         */
        useQuery<TData = GetData>(parameters: ServiceOperationQueryKey<GetSchema, GetParameters> | (DeepReadonly<GetParameters> | void), options: Omit<DefinedInitialDataOptions<GetData, GetError, TData, ServiceOperationQueryKey<GetSchema, GetParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetError | Error>;
        /**/
        fetchInfiniteQuery<TPageParam extends GetParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetSchema, GetData, GetParameters, DeepReadonly<TPageParam>, GetError> | void): Promise<OperationInfiniteData<GetData, GetParameters>>;
        /**/
        prefetchInfiniteQuery<TPageParam extends GetParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetSchema, GetData, GetParameters, DeepReadonly<TPageParam>, GetError> | void): Promise<void>;
        /**/
        ensureInfiniteQueryData<TPageParam extends GetParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<GetSchema, GetData, GetParameters, DeepReadonly<TPageParam>, GetError> | void): Promise<OperationInfiniteData<GetData, GetParameters>>;
        /**/
        fetchQuery(options: ServiceOperationFetchQueryOptions<GetSchema, GetData, GetParameters, GetError> | void): Promise<GetData>;
        /**/
        prefetchQuery(options: ServiceOperationFetchQueryOptions<GetSchema, GetData, GetParameters, GetError> | void): Promise<void>;
        /**/
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<GetSchema, GetData, GetParameters, GetError> | void): Promise<GetData>;
        /**/
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<GetSchema, GetParameters> | (DeepReadonly<GetParameters> | void)): OperationInfiniteData<GetData, GetParameters> | undefined;
        /**/
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<GetSchema, GetParameters>,
            data: NoInfer<OperationInfiniteData<GetData, GetParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<GetSchema, GetParameters>,
            data: GetData | undefined
        ]>;
        /**/
        getQueryData(parameters: ServiceOperationQueryKey<GetSchema, GetParameters> | (DeepReadonly<GetParameters> | void)): GetData | undefined;
        /**/
        getQueryState(parameters: ServiceOperationQueryKey<GetSchema, GetParameters> | (DeepReadonly<GetParameters> | void)): QueryState<GetData, GetError> | undefined;
        /**/
        getInfiniteQueryState(parameters: DeepReadonly<GetParameters> | ServiceOperationInfiniteQueryKey<GetSchema, GetParameters> | void): QueryState<OperationInfiniteData<GetData, GetParameters>, GetError> | undefined;
        /**/
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<GetSchema, GetData, TInfinite, GetParameters, GetError>, options?: InvalidateOptions): Promise<void>;
        /**/
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>): number;
        /**/
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<GetSchema, GetParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<GetParameters, TMeta, TSignal> | void), client?: (schema: GetSchema, options: {
            parameters: GetParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<GetData, GetError>>): Promise<RequestFnResponse<GetData, GetError>>;
        /**/
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>, options?: RefetchOptions): Promise<void>;
        /**/
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>): void;
        /**/
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>, options?: ResetOptions): Promise<void>;
        /**/
        setInfiniteQueryData(parameters: (DeepReadonly<GetParameters> | undefined) | ServiceOperationInfiniteQueryKey<GetSchema, GetParameters>, updater: Updater<NoInfer<OperationInfiniteData<GetData, GetParameters>> | undefined, NoInfer<DeepReadonly<OperationInfiniteData<GetData, GetParameters>>> | undefined>, options?: SetDataOptions): OperationInfiniteData<GetData, GetParameters> | undefined;
        /**/
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>, updater: Updater<NoInfer<GetData> | undefined, NoInfer<GetData> | undefined>, options?: SetDataOptions): Array<GetData | undefined>;
        /**/
        setQueryData(parameters: (DeepReadonly<GetParameters> | undefined) | ServiceOperationQueryKey<GetSchema, GetParameters>, updater: Updater<NoInfer<GetData> | undefined, NoInfer<DeepReadonly<GetData>> | undefined>, options?: SetDataOptions): GetData | undefined;
        /**/
        getInfiniteQueryKey(parameters: DeepReadonly<GetParameters> | void): ServiceOperationInfiniteQueryKey<GetSchema, GetParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.v1Service.get.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetParameters, TQueryFnData = GetData, TData = OperationInfiniteData<TQueryFnData, GetParameters>>(parameters: ServiceOperationInfiniteQueryKey<GetSchema, GetParameters> | (DeepReadonly<GetParameters> | void), options: Omit<UndefinedInitialDataInfiniteOptions<TQueryFnData, GetError, TData, ServiceOperationInfiniteQueryKey<GetSchema, GetParameters>, PartialParameters<DeepReadonly<TPageParam>>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<TQueryFnData, PartialParameters<DeepReadonly<TPageParam>>>): UseInfiniteQueryResult<TData, GetError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.v1Service.get.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetParameters, TQueryFnData = GetData, TData = OperationInfiniteData<TQueryFnData, GetParameters>>(parameters: ServiceOperationInfiniteQueryKey<GetSchema, GetParameters> | (DeepReadonly<GetParameters> | void), options: Omit<DefinedInitialDataInfiniteOptions<TQueryFnData, GetError, TData, ServiceOperationInfiniteQueryKey<GetSchema, GetParameters>, PartialParameters<DeepReadonly<TPageParam>>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetData, PartialParameters<DeepReadonly<TPageParam>>>): DefinedUseInfiniteQueryResult<TData, GetError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const getTotal = qraft.v1Service.get.useIsFetching()
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const getResults = qraft.v1Service.get.useQueries({
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const getCombinedResults = qraft.v1Service.get.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<GetSchema, GetParameters, GetData, GetError>>, TCombinedResult = Array<UseQueryResult<GetData, GetError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<GetData, GetError>>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        getQueryKey(parameters: DeepReadonly<GetParameters> | void): ServiceOperationQueryKey<GetSchema, GetParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.v1Service.get.useQuery()
         * ```
         */
        useQuery<TData = GetData>(parameters: ServiceOperationQueryKey<GetSchema, GetParameters> | (DeepReadonly<GetParameters> | void), options?: Omit<UndefinedInitialDataOptions<GetData, GetError, TData, ServiceOperationQueryKey<GetSchema, GetParameters>>, "queryKey">): UseQueryResult<TData, GetError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.v1Service.get.useQuery()
         * ```
         */
        useQuery<TData = GetData>(parameters: ServiceOperationQueryKey<GetSchema, GetParameters> | (DeepReadonly<GetParameters> | void), options: Omit<DefinedInitialDataOptions<GetData, GetError, TData, ServiceOperationQueryKey<GetSchema, GetParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.v1Service.get.useSuspenseInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends GetParameters, TData = GetData>(parameters: ServiceOperationInfiniteQueryKey<GetSchema, GetParameters> | (DeepReadonly<GetParameters> | void), options: Omit<UseSuspenseInfiniteQueryOptions<GetData, GetError, OperationInfiniteData<TData, GetParameters>, GetData, ServiceOperationInfiniteQueryKey<GetSchema, GetParameters>, PartialParameters<DeepReadonly<TPageParam>>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetData, PartialParameters<DeepReadonly<TPageParam>>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, GetParameters>, GetError | Error>;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently with Suspense support.
         * Similar to useQueries but integrates with React Suspense for loading states.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseQueries|`useSuspenseQueries(...)` documentation}
         * @example Basic usage with Suspense
         * ```ts
         * const getData = qraft.v1Service.get.useSuspenseQueries({
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example With data transformation using combine
         * ```ts
         * const getCombinedData = qraft.v1Service.get.useSuspenseQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getCombinedData.forEach(data => console.log({ data }));
         * ```
         */
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<GetSchema, GetParameters, GetData, GetError>>, TCombinedResult = Array<UseSuspenseQueryResult<GetData, GetError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<GetData, GetError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**
         * Performs asynchronous data fetching with Suspense support.
         * Similar to useQuery but integrates with React Suspense for loading states.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseQuery|`useSuspenseQuery(...)` documentation}
         * @example Suspense Query without parameters
         * ```ts
         * const data = qraft.v1Service.get.useSuspenseQuery()
         * ```
         */
        useSuspenseQuery<TData = GetData>(parameters: ServiceOperationQueryKey<GetSchema, GetParameters> | (DeepReadonly<GetParameters> | void), options?: Omit<UseSuspenseQueryOptions<GetData, GetError, TData, ServiceOperationQueryKey<GetSchema, GetParameters>>, "queryKey">): UseSuspenseQueryResult<TData, GetError | Error>;
        schema: GetSchema;
        types: {
            parameters: GetParameters;
            data: GetData;
            error: GetError;
        };
    };
}
export const getExample = {
    schema: {
        method: "get",
        url: "/v1/example"
    }
} as {
    schema: GetExampleSchema;
    [QraftServiceOperationsToken]: V1Service["getExample"];
};
export const get = {
    schema: {
        method: "get",
        url: "/v1"
    }
} as {
    schema: GetSchema;
    [QraftServiceOperationsToken]: V1Service["get"];
};
export const v1Service = {
    getExample,
    get
} as const;
type GetExampleSchema = {
    method: "get";
    url: "/v1/example";
};
type GetExampleParameters = paths["/v1/example"]["get"]["parameters"];
type GetExampleData = paths["/v1/example"]["get"]["responses"]["200"]["content"]["application/json"];
type GetExampleError = unknown;
type GetSchema = {
    method: "get";
    url: "/v1";
};
type GetParameters = undefined;
type GetData = paths["/v1"]["get"]["responses"]["200"]["content"]["text/plain"];
type GetError = unknown;
